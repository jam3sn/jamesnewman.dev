//---------------------------
// Variables
//---------------------------

$title-color: #1E272E;
$text-color: #2f3c46;
$bg-color: white;
$primary-color: #FFDD59;
$light-grey: #F7F8F7;
$transition: .3s;
$page-width: 800px;
$md: 768px;

$shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);

$border-radius: 12px;

$breakpoints: ('small': 767px,
    'medium': 992px,
    'large': 1200px) !default;

$title-fonts: "Catamaran",
-apple-system,
BlinkMacSystemFont,
"Segoe UI",
Roboto,
Helvetica,
Arial,
sans-serif,
"Apple Color Emoji",
"Segoe UI Emoji",
"Segoe UI Symbol";

$text-fonts: "Source Sans Pro",
-apple-system,
BlinkMacSystemFont,
"Segoe UI",
Roboto,
Helvetica,
Arial,
sans-serif,
"Apple Color Emoji",
"Segoe UI Emoji",
"Segoe UI Symbol";

$code-fonts: "Source Code",
"Lucida Console",
Monaco,
monospace;

//---------------------------
// Fonts
//---------------------------

@font-face {
    font-family: 'Catamaran';
    src: url('/assets/fonts/catamaran-extrabold-webfont.woff2') format('woff2'),
        url('/assets/fonts/catamaran-extrabold-webfont.woff') format('woff');
    font-weight: bold;
    font-style: normal;
}

@font-face {
    font-family: 'Source Sans Pro';
    src: url('/assets/fonts/sourcesanspro-regular-webfont.woff2') format('woff2'),
        url('/assets/fonts/sourcesanspro-regular-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Source Code';
    src: url('/assets/fonts/sourcecodepro-regular-webfont.woff2') format('woff2'),
        url('/assets/fonts/sourcecodepro-regular-webfont.woff') format('woff');
    font-weight: normal;
    font-style: normal;
}


//---------------------------
// Mixins
//---------------------------

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-to($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        +"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}